{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\themi\\\\Downloads\\\\Collaborative-Text-Editor\\\\Collaborative-Text-Editor\\\\client\\\\src\\\\TextEditor.js\",\n  _s = $RefreshSig$();\nimport { useCallback, useEffect, useState } from 'react';\nimport React from 'react';\nimport Quill from \"quill\";\nimport \"quill/dist/quill.snow.css\";\nimport { io } from 'socket.io-client';\nimport ReactQuill from \"react-quill\";\nimport EditorToolbar, { modules, formats } from \"./EditorToolbar\";\nimport \"./styles.css\";\n\n//Quill Toolbar Configurations\n// const TOOLBAR =  [\n//     [{ header: [1,2,3,4,5,6,false]}], //Types of Heading Sizes\n//     [{font : []}],\n//     [{list: \"ordered\"}, {list: \"bullet\"}],\n//     [\"bold\", \"italic\" , \"underline\"],\n//     [{color: []} , {background: []}],\n//     [{script:\"sub\"}, {script: \"super\"}],\n//     [{align: []}],\n//     [\"image\" , \"blackquote\" , \"code-block\"],\n//     [\"clean\"],\n// ]\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function TextEditor() {\n  _s();\n  //Set state to be able to connect to sockets\n  const [socket, setSocket] = useState();\n  const [quill, setQuill] = useState();\n  //Set State for the Toolbar\n  const [state, setState] = React.useState({\n    value: null\n  });\n  const handleChange = value => {\n    setState({\n      value\n    });\n  };\n  useEffect(() => {\n    const s = io(\"http://localhost:3001\"); // connects to the server url that had been declared on server.js\n    setSocket(s); //initiate the socket to variable S\n\n    return () => {\n      //disconnect from our server when no longer needed\n      s.disconnect();\n    };\n  }, []);\n\n  //Function to act as the receiving event from the server\n  useEffect(() => {\n    //Check if socket or quill appears or not, otherwise return\n    if (socket == null || quill == null) return;\n    const handler = delta => {\n      quill.updateContents(delta);\n    };\n    socket.on(\"receive-changes\", handler);\n    return () => {\n      socket.off(\"receive-changes\", handler);\n    };\n  }, [socket, quill]);\n\n  //Function to detect changes on the documents using delta API from Quill\n  useEffect(() => {\n    //Check if socket or quill appears or not, otherwise return\n    if (socket == null || quill == null) return;\n    const handler = (delta, oldDelta, source) => {\n      //If source changes not by user, return nothing\n      if (source !== 'user') return;\n      //send the changes (delta) to the server\n      socket.emit(\"send-changes\", delta); //delta denoted the subset of changes\n    };\n\n    quill.on('text-change', handler);\n    return () => {\n      quill.off(\"text-change\", handler);\n    };\n  }, [socket, quill]);\n  const wrapperRef = useCallback(wrapper => {\n    if (wrapper == null) return;\n    wrapper.innerHTML = \"\";\n    const editor = document.createElement('div');\n    wrapper.append(editor); //editor is put inside wrapperRef\n    const q = new Quill(editor, {\n      theme: \"snow\",\n      modules: {\n        toolbar: TOOLBAR\n      }\n    }); //quill is stated in editor \n    setQuill(q);\n  }, []);\n  useEffect(() => {\n    return () => {\n      wrapperRef.innerHTML = \"\"; //clears everything out\n    };\n  }, []); //useEffect is used here so the new instance of quill only run once\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      ref: wrapperRef\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"text-editor\",\n      children: [/*#__PURE__*/_jsxDEV(EditorToolbar, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(ReactQuill, {\n        theme: \"snow\",\n        value: state.value,\n        onChange: handleChange,\n        placeholder: \"Write something awesome...\",\n        modules: modules,\n        formats: formats\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 61\n    }, this)]\n  }, void 0, true); //makes the header \n}\n_s(TextEditor, \"7Bx0trRWkEGB4FdJVfhvAdrbrNo=\");\n_c = TextEditor;\nvar _c;\n$RefreshReg$(_c, \"TextEditor\");","map":{"version":3,"names":["useCallback","useEffect","useState","React","Quill","io","ReactQuill","EditorToolbar","modules","formats","TextEditor","socket","setSocket","quill","setQuill","state","setState","value","handleChange","s","disconnect","handler","delta","updateContents","on","off","oldDelta","source","emit","wrapperRef","wrapper","innerHTML","editor","document","createElement","append","q","theme","toolbar","TOOLBAR"],"sources":["C:/Users/themi/Downloads/Collaborative-Text-Editor/Collaborative-Text-Editor/client/src/TextEditor.js"],"sourcesContent":["import { useCallback, useEffect, useState} from 'react'\r\nimport React from 'react'\r\nimport Quill from \"quill\"\r\nimport \"quill/dist/quill.snow.css\"\r\nimport {io} from 'socket.io-client'\r\nimport ReactQuill from \"react-quill\";\r\nimport EditorToolbar, { modules, formats } from \"./EditorToolbar\";\r\nimport \"./styles.css\";\r\n\r\n\r\n//Quill Toolbar Configurations\r\n// const TOOLBAR =  [\r\n//     [{ header: [1,2,3,4,5,6,false]}], //Types of Heading Sizes\r\n//     [{font : []}],\r\n//     [{list: \"ordered\"}, {list: \"bullet\"}],\r\n//     [\"bold\", \"italic\" , \"underline\"],\r\n//     [{color: []} , {background: []}],\r\n//     [{script:\"sub\"}, {script: \"super\"}],\r\n//     [{align: []}],\r\n//     [\"image\" , \"blackquote\" , \"code-block\"],\r\n//     [\"clean\"],\r\n// ]\r\nexport default function TextEditor(){ \r\n    //Set state to be able to connect to sockets\r\n    const [socket, setSocket] = useState()\r\n    const [quill, setQuill] = useState()\r\n    //Set State for the Toolbar\r\n    const [state, setState] = React.useState({ value: null });\r\n    const handleChange = value => {\r\n      setState({ value });\r\n    };\r\n\r\n    useEffect(() => {\r\n        const s = io(\"http://localhost:3001\")  // connects to the server url that had been declared on server.js\r\n        setSocket(s)                           //initiate the socket to variable S\r\n\r\n        return() => {                          //disconnect from our server when no longer needed\r\n            s.disconnect()\r\n        }\r\n    }, [])\r\n\r\n    //Function to act as the receiving event from the server\r\n    useEffect(() => {\r\n        //Check if socket or quill appears or not, otherwise return\r\n        if( socket == null || quill == null) return\r\n\r\n        const handler = (delta) => {\r\n            quill.updateContents(delta)\r\n        }\r\n        socket.on(\"receive-changes\", handler)\r\n        \r\n        return() => {\r\n            socket.off(\"receive-changes\", handler)\r\n        }\r\n    }, [socket, quill])\r\n\r\n\r\n\r\n    //Function to detect changes on the documents using delta API from Quill\r\n    useEffect(() => {\r\n        //Check if socket or quill appears or not, otherwise return\r\n        if( socket == null || quill == null) return\r\n\r\n        const handler = (delta, oldDelta, source) => {\r\n            //If source changes not by user, return nothing\r\n            if (source !== 'user') return\r\n            //send the changes (delta) to the server\r\n            socket.emit(\"send-changes\", delta) //delta denoted the subset of changes\r\n        }\r\n        quill.on('text-change', handler)\r\n        \r\n        return() => {\r\n            quill.off(\"text-change\", handler)\r\n        }\r\n    }, [socket, quill])\r\n\r\n    const wrapperRef = useCallback(wrapper => {\r\n        if (wrapper == null) return\r\n        wrapper.innerHTML = \"\"\r\n        const editor = document.createElement('div')\r\n        wrapper.append(editor) //editor is put inside wrapperRef\r\n        const q = new Quill(editor, {\r\n            theme: \"snow\",\r\n            modules: { toolbar: TOOLBAR },\r\n        }) //quill is stated in editor \r\n        setQuill(q)\r\n    }, [])\r\n\r\n\r\n        useEffect(() => {\r\n\r\n        return() =>{ \r\n            wrapperRef.innerHTML = \"\" //clears everything out\r\n        }\r\n    }, [])                                 //useEffect is used here so the new instance of quill only run once\r\n    return (\r\n        <><div className=\"container\" ref={wrapperRef}></div><div className=\"text-editor\">\r\n            <EditorToolbar />\r\n            <ReactQuill\r\n                theme=\"snow\"\r\n                value={state.value}\r\n                onChange={handleChange}\r\n                placeholder={\"Write something awesome...\"}\r\n                modules={modules}\r\n                formats={formats} />\r\n        </div></>) //makes the header \r\n} "],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}